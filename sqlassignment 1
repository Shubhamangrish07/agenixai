 -- ====================
-- SCHEMA CREATION
-- ====================
CREATE DATABASE lms_db;

\c lms_db;

-- Authors Table
CREATE TABLE Authors (
    AuthorID SERIAL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Country VARCHAR(50)
);

-- Books Table
CREATE TABLE Books (
    BookID SERIAL PRIMARY KEY,
    Title VARCHAR(200) NOT NULL,
    Genre VARCHAR(50),
    PublicationYear INT,
    CopiesAvailable INT CHECK (CopiesAvailable >= 0)
);

-- BookAuthors Junction Table (Many-to-Many Relationship)
CREATE TABLE BookAuthors (
    BookID INT REFERENCES Books(BookID) ON DELETE CASCADE,
    AuthorID INT REFERENCES Authors(AuthorID) ON DELETE CASCADE,
    PRIMARY KEY (BookID, AuthorID)
);

-- Customers Table
CREATE TABLE Customers (
    CustomerID SERIAL PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Phone VARCHAR(15),
    RegistrationDate DATE DEFAULT CURRENT_DATE
);

-- Transactions Table
CREATE TABLE Transactions (
    TransactionID SERIAL PRIMARY KEY,
    BookID INT REFERENCES Books(BookID) ON DELETE CASCADE,
    CustomerID INT REFERENCES Customers(CustomerID) ON DELETE CASCADE,
    IssueDate DATE NOT NULL,
    ReturnDate DATE
);

-- ====================
-- SAMPLE DATA INSERTION
-- ====================
-- Insert Authors
INSERT INTO Authors (Name, Country) VALUES
('Author A', 'USA'),
('Author B', 'UK'),
('Author C', 'Canada');

-- Insert Books
INSERT INTO Books (Title, Genre, PublicationYear, CopiesAvailable) VALUES
('Book 1', 'Fantasy', 2001, 5),
('Book 2', 'Sci-Fi', 1999, 3),
('Book 3', 'Fantasy', 2010, 7);

-- Insert BookAuthors
INSERT INTO BookAuthors (BookID, AuthorID) VALUES
(1, 1),
(2, 2),
(3, 3);

-- Insert Customers
INSERT INTO Customers (Name, Email, Phone, RegistrationDate) VALUES
('Customer A', 'a@example.com', '123-456-7890', '2022-01-01'),
('Customer B', 'b@example.com', '987-654-3210', '2022-06-15');

-- Insert Transactions
INSERT INTO Transactions (BookID, CustomerID, IssueDate, ReturnDate) VALUES
(1, 1, '2023-01-01', '2023-01-15'),
(2, 2, '2023-02-01', NULL),
(3, 1, '2023-03-10', '2023-03-20');

-- ====================
-- QUERIES FOR TASKS
-- ====================
-- Task 1: Top 5 Most-Issued Books
SELECT Books.Title, COUNT(*) AS IssueCount
FROM Transactions
JOIN Books ON Transactions.BookID = Books.BookID
GROUP BY Books.Title
ORDER BY IssueCount DESC
LIMIT 5;

-- Task 2: Fantasy Books with Authors
SELECT Books.Title, Authors.Name, Books.PublicationYear
FROM Books
JOIN BookAuthors ON Books.BookID = BookAuthors.BookID
JOIN Authors ON BookAuthors.AuthorID = Authors.AuthorID
WHERE Books.Genre = 'Fantasy'
ORDER BY Books.PublicationYear DESC;

-- Task 3: Top 3 Customers Who Borrowed the Most Books
SELECT Customers.Name, COUNT(*) AS BorrowedCount
FROM Transactions
JOIN Customers ON Transactions.CustomerID = Customers.CustomerID
GROUP BY Customers.Name
ORDER BY BorrowedCount DESC
LIMIT 3;

-- Task 4: Customers with Overdue Books
SELECT Customers.Name, Customers.Email
FROM Transactions
JOIN Customers ON Transactions.CustomerID = Customers.CustomerID
WHERE Transactions.ReturnDate IS NULL AND Transactions.IssueDate < CURRENT_DATE - INTERVAL '30 days';

-- Task 5: Authors with More Than 3 Books
SELECT Authors.Name, COUNT(*) AS BookCount
FROM BookAuthors
JOIN Authors ON BookAuthors.AuthorID = Authors.AuthorID
GROUP BY Authors.Name
HAVING COUNT(*) > 3;

-- Task 6: Authors with Books Issued in the Last 6 Months
SELECT DISTINCT Authors.Name
FROM Transactions
JOIN BookAuthors ON Transactions.BookID = BookAuthors.BookID
JOIN Authors ON BookAuthors.AuthorID = Authors.AuthorID
WHERE Transactions.IssueDate >= CURRENT_DATE - INTERVAL '6 months';

-- Task 7: Total Books Issued and Percentage
SELECT 
    COUNT(*) AS TotalIssuedBooks,
    ROUND(COUNT(*)::DECIMAL / SUM(Books.CopiesAvailable) * 100, 2) AS IssuedPercentage
FROM Transactions
JOIN Books ON Transactions.BookID = Books.BookID
WHERE Transactions.ReturnDate IS NULL;

-- Task 8: Monthly Report of Issued Books
SELECT 
    DATE_TRUNC('month', Transactions.IssueDate) AS Month,
    COUNT(*) AS TotalBooksIssued,
    COUNT(DISTINCT Transactions.CustomerID) AS UniqueCustomers
FROM Transactions
WHERE Transactions.IssueDate >= CURRENT_DATE - INTERVAL '1 year'
GROUP BY Month
ORDER BY Month;

-- Task 9: Add Indexes
CREATE INDEX idx_transactions_issue_date ON Transactions(IssueDate);
CREATE INDEX idx_books_genre ON Books(Genre);
